const console = require('../../utils/logger.js');

const INJECT_BEFORE = 'jQuery.sap.registerModulePath';

const registerModulePaths = (metadata) => {
    return metadata.map(
        app => 'jQuery.sap.registerModulePath('+
            `"${app.applicationId}",`+
            `"/${app.applicationName}-${app.applicationVersion}"`+
            ');\n        '
    ).join('');
};

const patchResolutionResult = (data) => {
    return data + [
        '\n(function() {',
        '  const bootstrap = window["sap-ui-config"]["xx-bootTask"];',
        '  window["sap-ui-config"]["xx-bootTask"] = (callback) => {',
        '    bootstrap((...args) => {',
        '      const inbounds = window["sap-ushell-config"]',
        '                         .services.ClientSideTargetResolution.adapter.config.inbounds;',
        '      const ui5URL = document.getElementById("sap-ui-bootstrap")',
        '                       .getAttribute("src").split("/resources/")[0];',
        '      Object.keys(inbounds).forEach(key => {',
        '        inbounds[key].resolutionResult.url = inbounds[key].resolutionResult.url.replace(',
        '          new RegExp(ui5URL + "/+"), "/"',
        '        );',
        '      });',
        '      callback.apply(window, args)',
        '    });',
        '  };',
        '}());'
    ].join('\n');
};

module.exports = (metadata) => function modulePathPreprocessor(data, res) {
    const index = data.indexOf(INJECT_BEFORE);
    if (index >= 0) {
        const code = registerModulePaths(metadata);
        console.debug('Registering module paths:\n' + code);
        data = data.slice(0, index) + code + data.slice(index);
    } else {
        console.error('Can\'t inject module path registration. The string "' + INJECT_BEFORE + '" not found');
    }
    console.debug('Patching ClientSideTargetResolution adapter configuration');
    data = patchResolutionResult(data);
    return res.end(data);
};
